1. Initialization:
    The main function initializes the grid, start node, and destination node.
    The createNode function creates a new node with specified attributes.
    
2. A Search Algorithm*:
    The aStarSearch function implements the A* algorithm.
    It initializes an open list to store nodes to be evaluated.
    It adds the start node to the open list.
    While the open list is not empty:
        It selects the node with the lowest f value from the open list.
        It removes the selected node from the open list.
        It marks the selected node as visited.
        If the selected node is the destination, it prints the path and exits.
        Otherwise, it explores the neighboring nodes:
            It calculates the cost values g, h, and f for each neighbor.
            If a neighbor is not in the open list, it adds it to the open list.
            If a neighbor is already in the open list, it updates its cost values if the new values are better.
            If the open list becomes empty and the destination is not reached, it prints "Path not found".

3. Utility Functions:
    isValid: Checks if a given cell is within the grid.
    isDestination: Checks if a given cell is the destination.
    calculateHValue: Calculates the heuristic (h) value for a given cell.

4. Path Printing:
    The printPath function recursively prints the path from the destination node to the start node by following the parent pointers.

5. Data Structures:
    The Node structure represents each cell in the grid and contains attributes like row, column, cost values, and a pointer to the parent node.

6. In the main function:
    The grid represents the layout of the environment where the algorithm will find the path. It contains obstacles (0) and open spaces (1).
    The start node is defined with the row and column coordinates (0, 0), which is the top-left corner of the grid.
    The dest (destination) node is defined with the row and column coordinates (4, 4), which is the bottom-right corner of the grid.